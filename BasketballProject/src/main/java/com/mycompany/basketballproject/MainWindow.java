/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.basketballproject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private LoadPlayers playerData;
    
    public MainWindow() {
       
        
        try {
            playerData = new LoadPlayers();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("Load player data " + playerData.allPlayers.size());
        //System.out.println(playerData == null);
        
         initComponents();
         loadSeasonYears();
         loadAllTimeTeams();
         loadPredictionTable();
         loadRangePredictionTable();
         loadPlayerStatsTable();
         
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        nbaStats = new javax.swing.JTabbedPane();
        homePage = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        seasonStats = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        totalPointName = new javax.swing.JTextField();
        totalAssistName = new javax.swing.JTextField();
        totalReboundName = new javax.swing.JTextField();
        ppgName = new javax.swing.JTextField();
        apgName = new javax.swing.JTextField();
        rpgName = new javax.swing.JTextField();
        seasonYears = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        totalPoint = new javax.swing.JTextField();
        totalAssist = new javax.swing.JTextField();
        totalRebound = new javax.swing.JTextField();
        ppg = new javax.swing.JTextField();
        apg = new javax.swing.JTextField();
        rpg = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalBlockName = new javax.swing.JTextField();
        totalBlock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalStealName = new javax.swing.JTextField();
        totalSteal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        bpgName = new javax.swing.JTextField();
        bpg = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        spgName = new javax.swing.JTextField();
        spg = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        teamNames = new javax.swing.JComboBox<>();
        allTime = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        allTimePointsName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        allTimeAssistsName = new javax.swing.JTextField();
        allTimeReboundsName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        allTimeBlocksName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        allTimeStealsName = new javax.swing.JTextField();
        allTimePoints = new javax.swing.JTextField();
        allTimeAssists = new javax.swing.JTextField();
        allTimeRebounds = new javax.swing.JTextField();
        allTimeBlocks = new javax.swing.JTextField();
        allTimeSteals = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        allTimePPGName = new javax.swing.JTextField();
        allTimeAPGName = new javax.swing.JTextField();
        allTimeRPGName = new javax.swing.JTextField();
        allTimeBPGName = new javax.swing.JTextField();
        allTimeSPGName = new javax.swing.JTextField();
        allTimePPG = new javax.swing.JTextField();
        allTimeAPG = new javax.swing.JTextField();
        allTimeRPG = new javax.swing.JTextField();
        allTimeBPG = new javax.swing.JTextField();
        allTimeSPG = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        allTimeTeams = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        playerStats = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        playerStatsTable = new javax.swing.JTable();
        searchPlayerField = new javax.swing.JTextField();
        playerSearchButton = new javax.swing.JButton();
        prediction = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        predictionTable = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        avgPredictionField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        rangePredictionTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel35 = new javax.swing.JLabel();
        pointsPrediction = new javax.swing.JTextField();
        assistsPrediction = new javax.swing.JTextField();
        reboundsPrediction = new javax.swing.JTextField();
        blocksPrediction = new javax.swing.JTextField();
        stealsPrediction = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        predictionButton = new javax.swing.JButton();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel28.setFont(new java.awt.Font("Yu Gothic", 0, 36)); // NOI18N
        jLabel28.setText("NBA Statistics and Prediction");

        jLabel34.setFont(new java.awt.Font("Yu Gothic", 0, 24)); // NOI18N
        jLabel34.setText("DISCLAIMER: All data used came from basketball-reference.com");

        jLabel43.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel43.setText("All Time Leaders");

        jLabel44.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel44.setText("Player Statistics");

        jLabel45.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel45.setText("Season Stat Leaders");

        jLabel46.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel46.setText("Prediction Model");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("Here you can find the lead player for\neach team through the entirety of \nthe NBA. \n\nPick and choose your \nfavorite team and find out the all \ntime leaders with the existing stats \nof total points, assists, rebounds, \nblocks, and steals as well as a per \ngame statistical breakdown for \neach of these leaders! \n");
        jScrollPane5.setViewportView(jTextArea2);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setText("From the hundreds of NBA players, \nuse the search bar to find your \nfavorite player and learn their \noverall career stats!\n\nThe player name can be entered\npartially and the results will show\nall the players in the table that\nthe partial name");
        jScrollPane6.setViewportView(jTextArea3);

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setText("Through our very own prediction \nmodel, we looked into a variety of \nstatistics for each team and gave \na percent number of how likely the\nwinners of each NBA finals winner \nwas to win their season based\non team stats for that season. \n\nCustomize how much weight each \nstatistics plays into the overall \nprediction. Check how closely \nseason stats are correlated with \nthe team winners of the season \nand how close the prediction was!");
        jScrollPane7.setViewportView(jTextArea4);

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jTextArea5.setText("Here you can find the lead player on\neach team for categories such as \ntotal points, assists, rebounds,\nblocks, and steals.\n\nYou can find the team lead in\nthese categories for each NBA \nseason! Pick and choose your \nfavorite NBA team or season and \nfind out which of your favorite \nplayers is a season stat leader! \n");
        jScrollPane8.setViewportView(jTextArea5);

        javax.swing.GroupLayout homePageLayout = new javax.swing.GroupLayout(homePage);
        homePage.setLayout(homePageLayout);
        homePageLayout.setHorizontalGroup(
            homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePageLayout.createSequentialGroup()
                .addGap(115, 115, 115)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 738, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homePageLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(65, 65, 65)))
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jLabel44, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(53, 53, 53)))
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(homePageLayout.createSequentialGroup()
                                .addComponent(jLabel46, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                .addGap(315, 315, 315))))))
            .addGroup(homePageLayout.createSequentialGroup()
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePageLayout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jLabel28)
                        .addGap(83, 83, 83)
                        .addComponent(jLabel33))
                    .addGroup(homePageLayout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(homePageLayout.createSequentialGroup()
                    .addGap(135, 135, 135)
                    .addComponent(jLabel45, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                    .addGap(982, 982, 982)))
        );
        homePageLayout.setVerticalGroup(
            homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePageLayout.createSequentialGroup()
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(homePageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel28)
                            .addComponent(jLabel33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel34))
                    .addGroup(homePageLayout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel44)
                            .addComponent(jLabel43)
                            .addComponent(jLabel46))))
                .addGap(18, 18, 18)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addComponent(jLabel31)
                .addGap(301, 301, 301)
                .addComponent(jLabel32)
                .addContainerGap())
            .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(homePageLayout.createSequentialGroup()
                    .addGap(158, 158, 158)
                    .addComponent(jLabel45)
                    .addContainerGap(703, Short.MAX_VALUE)))
        );

        nbaStats.addTab("Home Page", homePage);

        jLabel1.setText("SEASON LEADERS");

        jLabel2.setText("Total Points");

        jLabel3.setText("Total Assists");

        jLabel4.setText("Total Rebounds");

        jLabel5.setText("PPG Leader");

        jLabel6.setText("APG Leader");

        jLabel7.setText("RPG Leader");

        totalPointName.setEditable(false);

        totalAssistName.setEditable(false);

        totalReboundName.setEditable(false);

        ppgName.setEditable(false);

        apgName.setEditable(false);

        rpgName.setEditable(false);

        seasonYears.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        seasonYears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonYearsActionPerformed(evt);
            }
        });

        jLabel8.setText("Select Team");

        totalPoint.setEditable(false);

        totalAssist.setEditable(false);

        totalRebound.setEditable(false);

        ppg.setEditable(false);

        apg.setEditable(false);

        rpg.setEditable(false);

        jLabel9.setText("Total Blocks");

        totalBlockName.setEditable(false);

        totalBlock.setEditable(false);

        jLabel10.setText("Total Steals");

        totalStealName.setEditable(false);

        totalSteal.setEditable(false);

        jLabel11.setText("BPG Leader");

        bpgName.setEditable(false);

        bpg.setEditable(false);

        jLabel12.setText("SPG Leader");

        spgName.setEditable(false);

        spg.setEditable(false);

        jLabel14.setText("Select Year");

        teamNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        teamNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout seasonStatsLayout = new javax.swing.GroupLayout(seasonStats);
        seasonStats.setLayout(seasonStatsLayout);
        seasonStatsLayout.setHorizontalGroup(
            seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seasonStatsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(seasonStatsLayout.createSequentialGroup()
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, seasonStatsLayout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18))
                                .addGroup(seasonStatsLayout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(22, 22, 22)))
                            .addGroup(seasonStatsLayout.createSequentialGroup()
                                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(9, 9, 9)))
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(totalReboundName)
                            .addComponent(totalPointName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalAssistName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalBlockName)
                            .addComponent(totalStealName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(seasonStatsLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel14)))
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(seasonStatsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalPoint, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(totalAssist)
                            .addComponent(totalRebound)
                            .addComponent(totalBlock)
                            .addComponent(totalSteal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, seasonStatsLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(seasonYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)))
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(seasonStatsLayout.createSequentialGroup()
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(seasonStatsLayout.createSequentialGroup()
                                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rpgName, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(bpgName)
                                    .addComponent(spgName)))
                            .addGroup(seasonStatsLayout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(apgName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 295, Short.MAX_VALUE)
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ppg, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(rpg)
                            .addComponent(apg, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bpg)
                            .addComponent(spg))
                        .addContainerGap(297, Short.MAX_VALUE))
                    .addGroup(seasonStatsLayout.createSequentialGroup()
                        .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, seasonStatsLayout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(47, 47, 47)
                                .addComponent(teamNames, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, seasonStatsLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(ppgName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(543, Short.MAX_VALUE))))
        );
        seasonStatsLayout.setVerticalGroup(
            seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(seasonStatsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(seasonYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel14)
                    .addComponent(teamNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(totalPointName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(totalAssistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAssist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(totalReboundName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rpgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalRebound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rpg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalBlockName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalBlock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(bpgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bpg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(seasonStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(totalStealName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalSteal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(spgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(583, Short.MAX_VALUE))
        );

        nbaStats.addTab("Season Stat Leaders", seasonStats);

        jLabel13.setText("Total Points");

        allTimePointsName.setEditable(false);

        jLabel15.setText("Total Assists");

        allTimeAssistsName.setEditable(false);

        allTimeReboundsName.setEditable(false);

        jLabel16.setText("Total Rebounds");

        jLabel17.setText("Total Blocks");

        allTimeBlocksName.setEditable(false);

        jLabel18.setText("Total Steals");

        allTimeStealsName.setEditable(false);

        allTimePoints.setEditable(false);

        allTimeAssists.setEditable(false);

        allTimeRebounds.setEditable(false);

        allTimeBlocks.setEditable(false);

        allTimeSteals.setEditable(false);

        jLabel19.setText("PPG Leader");

        jLabel20.setText("APG Leader");

        jLabel21.setText("RPG Leader");

        jLabel22.setText("BPG Leader");

        jLabel23.setText("SPG Leader");

        allTimePPGName.setEditable(false);

        allTimeAPGName.setEditable(false);

        allTimeRPGName.setEditable(false);

        allTimeBPGName.setEditable(false);

        allTimeSPGName.setEditable(false);

        allTimePPG.setEditable(false);
        allTimePPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimePPGActionPerformed(evt);
            }
        });

        allTimeAPG.setEditable(false);

        allTimeRPG.setEditable(false);

        allTimeBPG.setEditable(false);

        allTimeSPG.setEditable(false);

        jLabel24.setText("ALL TIME LEADERS");

        allTimeTeams.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        allTimeTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimeTeamsActionPerformed(evt);
            }
        });

        jLabel25.setText("Select Team");

        javax.swing.GroupLayout allTimeLayout = new javax.swing.GroupLayout(allTime);
        allTime.setLayout(allTimeLayout);
        allTimeLayout.setHorizontalGroup(
            allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allTimeLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(allTimeLayout.createSequentialGroup()
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel15))
                        .addGap(44, 44, 44)
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeBlocksName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allTimeStealsName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allTimePointsName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeAssistsName)
                            .addComponent(allTimeReboundsName))
                        .addGap(18, 18, 18)
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimePoints, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeRebounds, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeSteals, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(28, 28, 28)
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(allTimeBPGName, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                            .addComponent(allTimeRPGName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeAPGName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimePPGName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeSPGName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeBPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                            .addComponent(allTimeAPG)
                            .addComponent(allTimePPG)
                            .addComponent(allTimeRPG)
                            .addComponent(allTimeSPG)))
                    .addGroup(allTimeLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(allTimeTeams, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        allTimeLayout.setVerticalGroup(
            allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allTimeLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(allTimeTeams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(25, 25, 25)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(allTimePointsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimePoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(allTimePPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimePPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTimeAssistsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeAssists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(allTimeAPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeAPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(28, 28, 28)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTimeReboundsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(allTimeRebounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(allTimeRPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeRPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(allTimeBlocksName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(allTimeBPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeBPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addGroup(allTimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(allTimeStealsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(allTimeSteals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23)
                        .addComponent(allTimeSPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(allTimeSPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(611, Short.MAX_VALUE))
        );

        nbaStats.addTab("All Time Leaders", allTime);

        jLabel37.setText("Search for Players");

        playerStatsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Games Played", "Points", "Assists", "Rebounds", "Blocks", "Steals", "PPG", "APG", "RPG", "BPG", "SPG"
            }
        ));
        playerStatsTable.setShowGrid(true);
        playerStatsTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(playerStatsTable);
        playerStatsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        if (playerStatsTable.getColumnModel().getColumnCount() > 0) {
            playerStatsTable.getColumnModel().getColumn(0).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(0).setPreferredWidth(250);
            playerStatsTable.getColumnModel().getColumn(1).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(2).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(3).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(4).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(5).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(6).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(7).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(8).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(9).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(10).setResizable(false);
            playerStatsTable.getColumnModel().getColumn(11).setResizable(false);
        }

        searchPlayerField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPlayerFieldActionPerformed(evt);
            }
        });

        playerSearchButton.setText("Search");
        playerSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerStatsLayout = new javax.swing.GroupLayout(playerStats);
        playerStats.setLayout(playerStatsLayout);
        playerStatsLayout.setHorizontalGroup(
            playerStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStatsLayout.createSequentialGroup()
                .addComponent(jLabel37)
                .addGap(30, 30, 30)
                .addComponent(searchPlayerField, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerSearchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1285, Short.MAX_VALUE)
        );
        playerStatsLayout.setVerticalGroup(
            playerStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStatsLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(playerStatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(searchPlayerField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(228, Short.MAX_VALUE))
        );

        nbaStats.addTab("Player Stats", playerStats);

        predictionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Season", "Winner", "Scoring Rank", "Prediction"
            }
        ));
        predictionTable.setShowGrid(true);
        jScrollPane1.setViewportView(predictionTable);

        jLabel26.setText("AVERAGE PREDICTION PERCENT");

        avgPredictionField.setEditable(false);

        rangePredictionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Rank", "Prediction"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rangePredictionTable.setShowGrid(true);
        jScrollPane3.setViewportView(rangePredictionTable);
        if (rangePredictionTable.getColumnModel().getColumnCount() > 0) {
            rangePredictionTable.getColumnModel().getColumn(0).setResizable(false);
            rangePredictionTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("This table tells you the percent chance a team has if they are \nranked within these values.");
        jScrollPane4.setViewportView(jTextArea1);

        jLabel35.setText("Please input your weightage that you want to give for each category");

        pointsPrediction.setText("0.4");
        pointsPrediction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsPredictionActionPerformed(evt);
            }
        });

        assistsPrediction.setText("0.15");

        reboundsPrediction.setText("0.15");
        reboundsPrediction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reboundsPredictionActionPerformed(evt);
            }
        });

        blocksPrediction.setText("0.15");

        stealsPrediction.setText("0.15");

        jLabel36.setText("Points");

        jLabel38.setText("Assists");

        jLabel39.setText("Rebounds");

        jLabel40.setText("Blocks");

        jLabel41.setText("Steals");

        predictionButton.setText("Run Prediction");
        predictionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                predictionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout predictionLayout = new javax.swing.GroupLayout(prediction);
        prediction.setLayout(predictionLayout);
        predictionLayout.setHorizontalGroup(
            predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictionLayout.createSequentialGroup()
                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(predictionLayout.createSequentialGroup()
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(predictionLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel26)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(avgPredictionField, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(predictionLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 651, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(93, 93, 93)
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)))
                    .addGroup(predictionLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(predictionLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel36)
                                    .addComponent(pointsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(40, 40, 40)
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(predictionLayout.createSequentialGroup()
                                        .addComponent(jLabel38)
                                        .addGap(61, 61, 61))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, predictionLayout.createSequentialGroup()
                                        .addComponent(assistsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)))
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(reboundsPrediction))
                                .addGap(77, 77, 77)
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel40)
                                    .addComponent(blocksPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(59, 59, 59)
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(predictionLayout.createSequentialGroup()
                                        .addComponent(stealsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(105, 105, 105)
                                        .addComponent(predictionButton))
                                    .addComponent(jLabel41))))))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        predictionLayout.setVerticalGroup(
            predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(predictionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addGap(25, 25, 25)
                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(predictionLayout.createSequentialGroup()
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(predictionLayout.createSequentialGroup()
                                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel39)
                                    .addComponent(jLabel40)
                                    .addComponent(jLabel41))
                                .addGap(8, 8, 8))
                            .addGroup(predictionLayout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blocksPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(predictionButton)
                            .addComponent(stealsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pointsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(predictionLayout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addGap(9, 9, 9)
                        .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(reboundsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(assistsPrediction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(predictionLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(predictionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(avgPredictionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(391, Short.MAX_VALUE))
        );

        nbaStats.addTab("Prediction", prediction);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(nbaStats, javax.swing.GroupLayout.PREFERRED_SIZE, 1290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nbaStats, javax.swing.GroupLayout.PREFERRED_SIZE, 818, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allTimeTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimeTeamsActionPerformed
        // TODO add your handling code here:

        String selectedItem = (String) allTimeTeams.getSelectedItem();
        if(selectedItem == null){
            return;
        }
        if(selectedItem.equals("All Teams")){
            setValuesForAllTimeLeaders();
            return;
        }

        setValuesForAllTimeTeamLeaders(selectedItem);
    }//GEN-LAST:event_allTimeTeamsActionPerformed

    private void allTimePPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimePPGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allTimePPGActionPerformed

    private void teamNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNamesActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) teamNames.getSelectedItem();
        if (selectedItem == null) {
            return;
        }
        int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));
        if (selectedItem.equals("All Teams")){
            setValuesForSeasonLeaders(selectedYear);
            return;
        }
        setValuesForSeasonLeadersByTeamAndYear(selectedYear, selectedItem);
        TeamByYear tempTeam = null;
        for(TeamByYear x : playerData.allTeamsByYear){
            if (x.getTeamYear()==selectedYear && x.getTeamName().equals(selectedItem)){
                tempTeam = x;
            }
        }
        System.out.println("Team Average Score is " + tempTeam.predictedTeamScore());
    }//GEN-LAST:event_teamNamesActionPerformed

    private void seasonYearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonYearsActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) seasonYears.getSelectedItem();
        if (selectedItem == null) {
            return;
        }

        int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));

        loadTeamNames(selectedYear);
        setValuesForSeasonLeaders(selectedYear);
    }//GEN-LAST:event_seasonYearsActionPerformed

    private void searchPlayerFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPlayerFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_searchPlayerFieldActionPerformed

    private void playerSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerSearchButtonActionPerformed
        // TODO add your handling code here:
        if(searchPlayerField.getText().isBlank()){
            loadPlayerStatsTable();
            return;
        } else {
            loadPlayerStatsTable(searchPlayerField.getText());
        }
    }//GEN-LAST:event_playerSearchButtonActionPerformed

    private void pointsPredictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsPredictionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointsPredictionActionPerformed

    private void reboundsPredictionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reboundsPredictionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_reboundsPredictionActionPerformed

    private void predictionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_predictionButtonActionPerformed
        // TODO add your handling code here:
        double[] predictionWeights = new double[5];
        double total = 0;
        predictionWeights[0] = Double.parseDouble(pointsPrediction.getText());
        predictionWeights[1] = Double.parseDouble(assistsPrediction.getText());
        predictionWeights[2] = Double.parseDouble(reboundsPrediction.getText());
        predictionWeights[3] = Double.parseDouble(blocksPrediction.getText());
        predictionWeights[4] = Double.parseDouble(stealsPrediction.getText());
        // System.out.println(predictionWeights[0] + " " + predictionWeights[1]);
        for(double x : predictionWeights){
            total += x;
        }
        if(total != 1.0){
            JOptionPane.showMessageDialog(this, "ERROR: Please make sure that the weight totals add up to 1");
            return;
        }
        for(TeamByYear x : playerData.allTeamsByYear){
            x.setWeightedAverage(predictionWeights);
        }
        playerData.sortNBAYearsData();
        loadPredictionTable();
        loadRangePredictionTable();
        
        
    }//GEN-LAST:event_predictionButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allTime;
    private javax.swing.JTextField allTimeAPG;
    private javax.swing.JTextField allTimeAPGName;
    private javax.swing.JTextField allTimeAssists;
    private javax.swing.JTextField allTimeAssistsName;
    private javax.swing.JTextField allTimeBPG;
    private javax.swing.JTextField allTimeBPGName;
    private javax.swing.JTextField allTimeBlocks;
    private javax.swing.JTextField allTimeBlocksName;
    private javax.swing.JTextField allTimePPG;
    private javax.swing.JTextField allTimePPGName;
    private javax.swing.JTextField allTimePoints;
    private javax.swing.JTextField allTimePointsName;
    private javax.swing.JTextField allTimeRPG;
    private javax.swing.JTextField allTimeRPGName;
    private javax.swing.JTextField allTimeRebounds;
    private javax.swing.JTextField allTimeReboundsName;
    private javax.swing.JTextField allTimeSPG;
    private javax.swing.JTextField allTimeSPGName;
    private javax.swing.JTextField allTimeSteals;
    private javax.swing.JTextField allTimeStealsName;
    private javax.swing.JComboBox<String> allTimeTeams;
    private javax.swing.JTextField apg;
    private javax.swing.JTextField apgName;
    private javax.swing.JTextField assistsPrediction;
    private javax.swing.JTextField avgPredictionField;
    private javax.swing.JTextField blocksPrediction;
    private javax.swing.JTextField bpg;
    private javax.swing.JTextField bpgName;
    private javax.swing.JPanel homePage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTabbedPane nbaStats;
    private javax.swing.JButton playerSearchButton;
    private javax.swing.JPanel playerStats;
    private javax.swing.JTable playerStatsTable;
    private javax.swing.JTextField pointsPrediction;
    private javax.swing.JTextField ppg;
    private javax.swing.JTextField ppgName;
    private javax.swing.JPanel prediction;
    private javax.swing.JButton predictionButton;
    private javax.swing.JTable predictionTable;
    private javax.swing.JTable rangePredictionTable;
    private javax.swing.JTextField reboundsPrediction;
    private javax.swing.JTextField rpg;
    private javax.swing.JTextField rpgName;
    private javax.swing.JTextField searchPlayerField;
    private javax.swing.JPanel seasonStats;
    private javax.swing.JComboBox<String> seasonYears;
    private javax.swing.JTextField spg;
    private javax.swing.JTextField spgName;
    private javax.swing.JTextField stealsPrediction;
    private javax.swing.JComboBox<String> teamNames;
    private javax.swing.JTextField totalAssist;
    private javax.swing.JTextField totalAssistName;
    private javax.swing.JTextField totalBlock;
    private javax.swing.JTextField totalBlockName;
    private javax.swing.JTextField totalPoint;
    private javax.swing.JTextField totalPointName;
    private javax.swing.JTextField totalRebound;
    private javax.swing.JTextField totalReboundName;
    private javax.swing.JTextField totalSteal;
    private javax.swing.JTextField totalStealName;
    // End of variables declaration//GEN-END:variables

    private void loadSeasonYears() {
        // puts all the years into the comboBox in Season Stat Leaders Panel
        seasonYears.removeAllItems();
        for(int i = 1980; i <= 2021; i++){
            seasonYears.addItem(Integer.toString(i) + "-" + Integer.toString(i+1));
        }
    }
    private void loadTeamNames(int selectedYear) {
        teamNames.removeAllItems();
        teamNames.addItem("All Teams");
        String selectedItem = (String) seasonYears.getSelectedItem();
        if (selectedItem == null) {
            return;
        }
        
        ArrayList<String> tempTeamNames = new ArrayList<>();
      //  int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));
        for (TeamInfo x: playerData.allTeamsInfo){
            if (x.yearsPlayed.contains(selectedYear)){
                //teamNames.addItem(x.getTeamName());
                tempTeamNames.add(x.getTeamName());
                
            }
        }
        Collections.sort(tempTeamNames);
        for (String z : tempTeamNames){
            teamNames.addItem(z);
        }
        
    }
    
    private void loadAllTimeTeams(){
        allTimeTeams.removeAllItems();
        allTimeTeams.addItem("All Teams");
        ArrayList<String> tempTeamNames = new ArrayList<>();
        for(Map.Entry<String, String> entry : playerData.allTeamsMap.entrySet()){
            // adds the teamNames that is given in the allTeamsMap to the tempTeamNames ArrayList<>()
            tempTeamNames.add(entry.getValue());
        }
        // based on alphabetical order, we sort the teamNames in the tempTeamNames ArrayList<>()
        Collections.sort(tempTeamNames);
        for(String x : tempTeamNames){
            // once we're done we add them to the comboBox
            allTimeTeams.addItem(x);
        }
    }
    
    private void printTeamNames() {
        for(TeamInfo x : playerData.allTeamsInfo){
            System.out.println(x.getTeamAcronym() + " " + x.getTeamName() + " " + x.getYearsPlayed());
        }
        System.out.println("Total Teams " + playerData.teamSet.size());
    }
    
    private void setValuesForSeasonLeaders(int selectedYear){
        for(YearlyStats x: playerData.allYearlyStats){
            if(x.getYearPlayed() == selectedYear){
                totalPoint.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPointsScored()));
                totalPointName.setText(x.getHighestPointsPlayer().getPlayerName());
                totalRebound.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalReboundsMade()));
                totalReboundName.setText(x.getHighestReboundsPlayer().getPlayerName());
                totalAssist.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssistsMade()));
                totalAssistName.setText(x.getHighestAssistsPlayer().getPlayerName());
                totalBlock.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocksMade()));
                totalBlockName.setText(x.getHighestBlocksPlayer().getPlayerName());
                totalSteal.setText(Integer.toString(x.getHighestStealsPlayer().getTotalStealsMade()));
                totalStealName.setText(x.getHighestStealsPlayer().getPlayerName());
                ppg.setText(Double.toString(x.getHighestPPGPlayer().getPoints()));
                ppgName.setText(x.getHighestPPGPlayer().getPlayerName());
                rpg.setText(Double.toString(x.getHighestRPGPlayer().getTotalRebounds()));
                rpgName.setText(x.getHighestRPGPlayer().getPlayerName());
                apg.setText(Double.toString(x.getHighestAPGPlayer().getAssists()));
                apgName.setText(x.getHighestAPGPlayer().getPlayerName());
                bpg.setText(Double.toString(x.getHighestBPGPlayer().getBlocks()));
                bpgName.setText(x.getHighestBPGPlayer().getPlayerName());
                spg.setText(Double.toString(x.getHighestSPGPlayer().getSteals()));
                spgName.setText(x.getHighestSPGPlayer().getPlayerName());

            }
        }
    }
    
    private void setValuesForSeasonLeadersByTeamAndYear(int selectedYear, String teamName){
        for(TeamByYear x: playerData.allTeamsByYear){
            if (x.teamName.equals(teamName) && x.getTeamYear() == selectedYear){
                totalPoint.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPointsScored()));
                totalPointName.setText(x.getHighestPointsPlayer().getPlayerName());
                totalRebound.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalReboundsMade()));
                totalReboundName.setText(x.getHighestReboundsPlayer().getPlayerName());
                totalAssist.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssistsMade()));
                totalAssistName.setText(x.getHighestAssistsPlayer().getPlayerName());
                totalBlock.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocksMade()));
                totalBlockName.setText(x.getHighestBlocksPlayer().getPlayerName());
                totalSteal.setText(Integer.toString(x.getHighestStealsPlayer().getTotalStealsMade()));
                totalStealName.setText(x.getHighestStealsPlayer().getPlayerName());
                ppg.setText(Double.toString(x.getHighestPPGPlayer().getPoints()));
                ppgName.setText(x.getHighestPPGPlayer().getPlayerName());
                rpg.setText(Double.toString(x.getHighestRPGPlayer().getTotalRebounds()));
                rpgName.setText(x.getHighestRPGPlayer().getPlayerName());
                apg.setText(Double.toString(x.getHighestAPGPlayer().getAssists()));
                apgName.setText(x.getHighestAPGPlayer().getPlayerName());
                bpg.setText(Double.toString(x.getHighestBPGPlayer().getBlocks()));
                bpgName.setText(x.getHighestBPGPlayer().getPlayerName());
                spg.setText(Double.toString(x.getHighestSPGPlayer().getSteals()));
                spgName.setText(x.getHighestSPGPlayer().getPlayerName());
            }
        }
    }
    
    private void setValuesForAllTimeLeaders(){
        allTimePointsName.setText(playerData.allTimeLeaders.getHighestPointsPlayer().getPlayerName());
        allTimePoints.setText(Integer.toString(playerData.allTimeLeaders.getHighestPointsPlayer().getTotalPoints()));
        allTimeAssistsName.setText(playerData.allTimeLeaders.getHighestAssistsPlayer().getPlayerName());
        allTimeAssists.setText(Integer.toString(playerData.allTimeLeaders.getHighestAssistsPlayer().getTotalAssists()));
        allTimeReboundsName.setText(playerData.allTimeLeaders.getHighestReboundsPlayer().getPlayerName());
        allTimeRebounds.setText(Integer.toString(playerData.allTimeLeaders.getHighestReboundsPlayer().getTotalRebounds()));
        allTimeBlocksName.setText(playerData.allTimeLeaders.getHighestBlocksPlayer().getPlayerName());
        allTimeBlocks.setText(Integer.toString(playerData.allTimeLeaders.getHighestBlocksPlayer().getTotalBlocks()));
        allTimeStealsName.setText(playerData.allTimeLeaders.getHighestStealsPlayer().getPlayerName());
        allTimeSteals.setText(Integer.toString(playerData.allTimeLeaders.getHighestStealsPlayer().getTotalSteals()));
        
        allTimePPGName.setText(playerData.allTimeLeaders.getHighestPPGPlayer().getPlayerName());
        allTimePPG.setText(Double.toString(playerData.allTimeLeaders.getHighestPPGPlayer().getPpg()));
        allTimeAPGName.setText(playerData.allTimeLeaders.getHighestAPGPlayer().getPlayerName());
        allTimeRPG.setText(Double.toString(playerData.allTimeLeaders.getHighestAPGPlayer().getApg()));
        allTimeRPGName.setText(playerData.allTimeLeaders.getHighestRPGPlayer().getPlayerName());
        allTimeAPG.setText(Double.toString(playerData.allTimeLeaders.getHighestRPGPlayer().getRpg()));
        allTimeBPGName.setText(playerData.allTimeLeaders.getHighestBPGPlayer().getPlayerName());
        allTimeBPG.setText(Double.toString(playerData.allTimeLeaders.getHighestBPGPlayer().getBpg()));
        allTimeSPGName.setText(playerData.allTimeLeaders.getHighestSPGPlayer().getPlayerName());
        allTimeSPG.setText(Double.toString(playerData.allTimeLeaders.getHighestSPGPlayer().getSpg()));
    }
    
    private void setValuesForAllTimeTeamLeaders(String selectedTeam){
        for(TeamInfo x : playerData.allTeamsInfo){
            if(x.getTeamName().equals(selectedTeam)){
                allTimePointsName.setText(x.getHighestPointsPlayer().getPlayerName());
                allTimePoints.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPoints()));
                allTimeAssistsName.setText(x.getHighestAssistsPlayer().getPlayerName());
                allTimeAssists.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssists()));
                allTimeReboundsName.setText(x.getHighestReboundsPlayer().getPlayerName());
                allTimeRebounds.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalRebounds()));
                allTimeBlocksName.setText(x.getHighestBlocksPlayer().getPlayerName());
                allTimeBlocks.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocks()));
                allTimeStealsName.setText(x.getHighestStealsPlayer().getPlayerName());
                allTimeSteals.setText(Integer.toString(x.getHighestStealsPlayer().getTotalSteals()));
                
                allTimePPGName.setText(x.getHighestPPGPlayer().getPlayerName());
                allTimePPG.setText(Double.toString(x.getHighestPPGPlayer().getPpg()));
                allTimeAPGName.setText(x.getHighestAPGPlayer().getPlayerName());
                allTimeAPG.setText(Double.toString(x.getHighestAPGPlayer().getApg()));
                allTimeRPGName.setText(x.getHighestRPGPlayer().getPlayerName());
                allTimeRPG.setText(Double.toString(x.getHighestRPGPlayer().getRpg()));
                allTimeBPGName.setText(x.getHighestBPGPlayer().getPlayerName());
                allTimeBPG.setText(Double.toString(x.getHighestBPGPlayer().getBpg()));
                allTimeSPGName.setText(x.getHighestSPGPlayer().getPlayerName());
                allTimeSPG.setText(Double.toString(x.getHighestSPGPlayer().getSpg()));
            }
            
        }
//        allTimePointsName.setText(playerData.allTimeLeaders.getHighestPointsPlayer().getPlayerName());
//        allTimePoints.setText(Integer.toString(playerData.allTimeLeaders.getHighestPointsPlayer().getTotalPoints()));
//        allTimeAssistsName.setText(playerData.allTimeLeaders.getHighestAssistsPlayer().getPlayerName());
//        allTimeAssists.setText(Integer.toString(playerData.allTimeLeaders.getHighestAssistsPlayer().getTotalAssists()));
//        allTimeReboundsName.setText(playerData.allTimeLeaders.getHighestReboundsPlayer().getPlayerName());
//        allTimeRebounds.setText(Integer.toString(playerData.allTimeLeaders.getHighestReboundsPlayer().getTotalRebounds()));
//        allTimeBlocksName.setText(playerData.allTimeLeaders.getHighestBlocksPlayer().getPlayerName());
//        allTimeBlocks.setText(Integer.toString(playerData.allTimeLeaders.getHighestBlocksPlayer().getTotalBlocks()));
//        allTimeStealsName.setText(playerData.allTimeLeaders.getHighestStealsPlayer().getPlayerName());
//        allTimeSteals.setText(Integer.toString(playerData.allTimeLeaders.getHighestStealsPlayer().getTotalSteals()));
//        
//        allTimePPGName.setText(playerData.allTimeLeaders.getHighestPPGPlayer().getPlayerName());
//        allTimePPG.setText(Double.toString(playerData.allTimeLeaders.getHighestPPGPlayer().getPpg()));
//        allTimeAPGName.setText(playerData.allTimeLeaders.getHighestAPGPlayer().getPlayerName());
//        allTimeAPG.setText(Double.toString(playerData.allTimeLeaders.getHighestAPGPlayer().getApg()));
//        allTimeRPGName.setText(playerData.allTimeLeaders.getHighestRPGPlayer().getPlayerName());
//        allTimeRPG.setText(Double.toString(playerData.allTimeLeaders.getHighestRPGPlayer().getRpg()));
//        allTimeBPGName.setText(playerData.allTimeLeaders.getHighestBPGPlayer().getPlayerName());
//        allTimeBPG.setText(Double.toString(playerData.allTimeLeaders.getHighestBPGPlayer().getBpg()));
//        allTimeSPGName.setText(playerData.allTimeLeaders.getHighestSPGPlayer().getPlayerName());
//        allTimeSPG.setText(Double.toString(playerData.allTimeLeaders.getHighestSPGPlayer().getSpg()));
    }

    public void loadPredictionTable(){
        // we take the year, champion, and their rank based on our weightedAverage
        // in our average, we give 40% to points and 15% to assists, rebounds, blocks, and steals.
        // we wanted to give the most weight to the points because that's the deciding factor in all games
        String tempYear;
        String tempChamp;
        int tempRank;
        String tempPredict;
        int totalTeams = 0;
        double averagePrediction = 0.0;
        DefaultTableModel tableModel = (DefaultTableModel) predictionTable.getModel();
        tableModel.setRowCount(0);
        for(int i = 1980; i < 2021; i++){
            tempYear = (Integer.toString(i) + "-" + Integer.toString(i+1));
            tempChamp = playerData.leagueChampsByYearMap.get(i);
            tempRank = 0;
            tempPredict = "predict";
            Object[] row = new Object[4];
            int scoringRank = 0;
            for(NBAYears x : playerData.nbaYears){
                if(x.getYearPlayed() == i){
                    totalTeams = x.teamsPlayed.size();
                    
                    for(TeamByYear y : x.teamsPlayed){
                        if(y.teamName.equals(tempChamp)){
                            // loops through the teamRank based on the weightedAverage
                            tempRank = scoringRank + 1;
                            // System.out.println("Scoring position was: " + tempYear + " position is " + scoringRank);
                        }
                        scoringRank++;
                    }
                }
            }
            // this is where we predict how accurate we were using the formula (100/totalTeams) * (totalTeams + 1- tempRank)
            double predict = ((double)((100 * 1.0/totalTeams) * (totalTeams + 1 - tempRank)));
            // then we round our prediction percentage
            predict = Math.round(predict * 100.0) / 100.0;
            averagePrediction += predict;
            // set the rows to each respective value
            row[0] = tempYear;
            row[1] = tempChamp;
            row[2] = tempRank;
            row[3] = Double.toString(predict);
            // then add the rows to the table
            tableModel.addRow(row);
        }
        // after we get the prediction value per season, we take the average across the 41 years of data 
        // and get on average how accurate our model was in predicting the championship
        averagePrediction = averagePrediction * 1.0 / playerData.nbaYears.size();
        averagePrediction = Math.round(averagePrediction * 100.0) / 100.0;
        avgPredictionField.setText(Double.toString(averagePrediction));

        
    }
    
    public void loadRangePredictionTable(){
        // this is a separate prediction model by range of 5 teams to see how accurate our model was
        // per range of teams
        DefaultTableModel tableModel = (DefaultTableModel) rangePredictionTable.getModel();
        tableModel.setRowCount(0);
        // we create a list of ranges and their lowest and highest boundaries
        String[] ranges = {"1-5", "6-10", "11-15", "16-20", "21-25", "26-30"};
        int[] lowerBoundary = {1, 6, 11, 16, 21, 26};
        int[] higherBoundary = {5, 10, 15, 20, 25, 30};
        for(int i = 0; i < 6; i++){
            // loops through the 6 ranges and adds the ranges to the first column
            // then adds the percentage in the second column
            Object[] row = new Object[2];
            row[0] = ranges[i];
            row[1] = getRangeWinPercentage(lowerBoundary[i], higherBoundary[i]);
            tableModel.addRow(row);
        }
        
    }
    
    public double getRangeWinPercentage(int lower, int higher){
        // gets the percentage of how accurate our model is per range of teams
        double rangePercentage = 0;
        int count = 0;
        int valueOfRow = 0;
//        System.out.println("Total Rows= " + predictionTable.getRowCount());
        for(int j = 0; j < predictionTable.getRowCount(); j++){
            valueOfRow = (int) predictionTable.getValueAt(j, 2);
            //System.out.println("Value of row and actual value " + j + " " + valueOfRow);
            if(valueOfRow >= lower && valueOfRow <= higher){
                //System.out.println("(inside if) Value of row and actual value " + j + " " + valueOfRow );
                count++;
            }
        }
        
        //System.out.println(lower + " " + higher + " " + count);
        rangePercentage = count * 100.0 / predictionTable.getRowCount();
        rangePercentage = Math.round(rangePercentage * 100.0) / 100.0;
        return rangePercentage;
    }
    
    public void loadPlayerStatsTable(){
        DefaultTableModel tableModel = (DefaultTableModel) playerStatsTable.getModel();
        tableModel.setRowCount(0);
        playerData.allPlayers.sort(Comparator.comparing(a -> a.getPlayerName()));
         for(PlayerInfo x : playerData.allPlayers){
            Object[] row = new Object[12];
            row[0] = x.getPlayerName();
            row[1] = x.getTotalGamesPlayed();
            row[2] = x.getTotalPoints();
            row[3] = x.getTotalAssists();
            row[4] = x.getTotalRebounds();
            row[5] = x.getTotalBlocks();
            row[6] = x.getTotalSteals();
            row[7] = x.getPpg();
            row[8] = x.getApg();
            row[9] = x.getRpg();
            row[10] = x.getBpg();
            row[11] = x.getSpg();
            tableModel.addRow(row);
            
         }
        
        
    }
    
    public void loadPlayerStatsTable(String textField){
        // per player we set the individual stats of a player over their entire career
        DefaultTableModel tableModel = (DefaultTableModel) playerStatsTable.getModel();
        tableModel.setRowCount(0);
        playerData.allPlayers.sort(Comparator.comparing(a -> a.getPlayerName()));
         for(PlayerInfo x : playerData.allPlayers){
            if(x.getPlayerName().toLowerCase().contains(textField.toLowerCase())){
                Object[] row = new Object[12];
                row[0] = x.getPlayerName();
                row[1] = x.getTotalGamesPlayed();
                row[2] = x.getTotalPoints();
                row[3] = x.getTotalAssists();
                row[4] = x.getTotalRebounds();
                row[5] = x.getTotalBlocks();
                row[6] = x.getTotalSteals();
                row[7] = x.getPpg();
                row[8] = x.getApg();
                row[9] = x.getRpg();
                row[10] = x.getBpg();
                row[11] = x.getSpg();
                
                tableModel.addRow(row);
            }
            
            
         }
        
        
    }
    
    
}

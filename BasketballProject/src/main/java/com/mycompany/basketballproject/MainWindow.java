/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.basketballproject;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    private LoadPlayers playerData;
    public MainWindow() {
       
        
        try {
            playerData = new LoadPlayers();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //System.out.println("Load player data " + playerData.allPlayers.size());
        //System.out.println(playerData == null);
        
         initComponents();
         loadSeasonYears();
         loadAllTimeTeams();
         //printTeamNames();
         loadPredictionTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        totalPointName = new javax.swing.JTextField();
        totalAssistName = new javax.swing.JTextField();
        totalReboundName = new javax.swing.JTextField();
        ppgName = new javax.swing.JTextField();
        apgName = new javax.swing.JTextField();
        rpgName = new javax.swing.JTextField();
        seasonYears = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        totalPoint = new javax.swing.JTextField();
        totalAssist = new javax.swing.JTextField();
        totalRebound = new javax.swing.JTextField();
        ppg = new javax.swing.JTextField();
        apg = new javax.swing.JTextField();
        rpg = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        totalBlockName = new javax.swing.JTextField();
        totalBlock = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        totalStealName = new javax.swing.JTextField();
        totalSteal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        bpgName = new javax.swing.JTextField();
        bpg = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        spgName = new javax.swing.JTextField();
        spg = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        teamNames = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        allTimePointsName = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        allTimeAssistsName = new javax.swing.JTextField();
        allTimeReboundsName = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        allTimeBlocksName = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        allTimeStealsName = new javax.swing.JTextField();
        allTimePoints = new javax.swing.JTextField();
        allTimeAssists = new javax.swing.JTextField();
        allTimeRebounds = new javax.swing.JTextField();
        allTimeBlocks = new javax.swing.JTextField();
        allTimeSteals = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        allTimePPGName = new javax.swing.JTextField();
        allTimeAPGName = new javax.swing.JTextField();
        allTimeRPGName = new javax.swing.JTextField();
        allTimeBPGName = new javax.swing.JTextField();
        allTimeSPGName = new javax.swing.JTextField();
        allTimePPG = new javax.swing.JTextField();
        allTimeAPG = new javax.swing.JTextField();
        allTimeRPG = new javax.swing.JTextField();
        allTimeBPG = new javax.swing.JTextField();
        allTimeSPG = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        allTimeTeams = new javax.swing.JComboBox<>();
        jLabel25 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        predictionTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("SEASON LEADERS");

        jLabel2.setText("Total Points");

        jLabel3.setText("Total Assists");

        jLabel4.setText("Total Rebounds");

        jLabel5.setText("PPG Leader");

        jLabel6.setText("APG Leader");

        jLabel7.setText("RPG Leader");

        totalPointName.setEditable(false);

        seasonYears.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        seasonYears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonYearsActionPerformed(evt);
            }
        });

        jLabel8.setText("Select Team");

        jLabel9.setText("Total Blocks");

        jLabel10.setText("Total Steals");

        jLabel11.setText("BPG Leader");

        jLabel12.setText("SPG Leader");

        jLabel14.setText("Select Year");

        teamNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        teamNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(18, 18, 18))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(22, 22, 22)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(9, 9, 9)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(totalReboundName)
                            .addComponent(totalPointName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalAssistName, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(totalBlockName)
                            .addComponent(totalStealName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel14)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(totalPoint, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(totalAssist)
                            .addComponent(totalRebound)
                            .addComponent(totalBlock)
                            .addComponent(totalSteal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(seasonYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rpgName, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                    .addComponent(bpgName)
                                    .addComponent(spgName)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(apgName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 54, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ppg, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addComponent(rpg)
                            .addComponent(apg, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bpg)
                            .addComponent(spg))
                        .addContainerGap(53, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(47, 47, 47)
                                .addComponent(teamNames, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(ppgName, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(57, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(seasonYears, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel14)
                    .addComponent(teamNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(totalPointName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6)
                    .addComponent(totalAssistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalAssist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(totalReboundName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rpgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalRebound, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rpg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(totalBlockName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(totalBlock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel11)
                        .addComponent(bpgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bpg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(totalStealName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalSteal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(spgName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Season Stat Leaders", jPanel1);

        jLabel13.setText("Total Points");

        jLabel15.setText("Total Assists");

        jLabel16.setText("Total Rebounds");

        jLabel17.setText("Total Blocks");

        jLabel18.setText("Total Steals");

        jLabel19.setText("PPG Leader");

        jLabel20.setText("APG Leader");

        jLabel21.setText("RPG Leader");

        jLabel22.setText("BPG Leader");

        jLabel23.setText("SPG Leader");

        allTimePPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimePPGActionPerformed(evt);
            }
        });

        jLabel24.setText("ALL TIME LEADERS");

        allTimeTeams.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        allTimeTeams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allTimeTeamsActionPerformed(evt);
            }
        });

        jLabel25.setText("Select Team");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel15))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeBlocksName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allTimeStealsName, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(allTimePointsName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeAssistsName)
                            .addComponent(allTimeReboundsName))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeAssists, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimePoints, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeRebounds, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allTimeSteals, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeAPGName, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(allTimeRPGName)
                            .addComponent(allTimeBPGName)
                            .addComponent(allTimeSPGName)
                            .addComponent(allTimePPGName))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allTimeBPG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                            .addComponent(allTimeAPG)
                            .addComponent(allTimePPG)
                            .addComponent(allTimeRPG)
                            .addComponent(allTimeSPG)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(78, 78, 78)
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(allTimeTeams, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(allTimeTeams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(allTimePointsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimePoints, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(allTimePPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimePPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTimeAssistsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeAssists, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(allTimeAPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeAPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(allTimeReboundsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(allTimeRebounds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(allTimeRPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeRPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(allTimeBlocksName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeBlocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(allTimeBPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(allTimeBPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(allTimeStealsName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(allTimeSteals, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23)
                        .addComponent(allTimeSPGName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(allTimeSPG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(167, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("All Time Leaders", jPanel3);

        predictionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Season", "Winner", "Scoring Rank", "Prediction"
            }
        ));
        predictionTable.setShowGrid(true);
        jScrollPane1.setViewportView(predictionTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(363, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(185, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Prediction", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 490, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 357, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void seasonYearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonYearsActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) seasonYears.getSelectedItem();
        if (selectedItem == null) {
            return;
        }

        int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));

        loadTeamNames(selectedYear);
        setValuesForSeasonLeaders(selectedYear);

    }//GEN-LAST:event_seasonYearsActionPerformed

    private void teamNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamNamesActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) teamNames.getSelectedItem();
        if (selectedItem == null) {
            return;
        }
        int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));
        if (selectedItem.equals("All Teams")){
            setValuesForSeasonLeaders(selectedYear);
            return;
        }
        setValuesForSeasonLeadersByTeamAndYear(selectedYear, selectedItem);
        TeamByYear tempTeam = null;
        for(TeamByYear x : playerData.allTeamsByYear){
            if (x.getTeamYear()==selectedYear && x.getTeamName().equals(selectedItem)){
                tempTeam = x;
            }
        }
        System.out.println("Team Average Score is " + tempTeam.predictedTeamScore());
    }//GEN-LAST:event_teamNamesActionPerformed

    private void allTimePPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimePPGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allTimePPGActionPerformed

    private void allTimeTeamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allTimeTeamsActionPerformed
        // TODO add your handling code here:
        
        String selectedItem = (String) allTimeTeams.getSelectedItem();
        if(selectedItem == null){
            return;
        }
        if(selectedItem.equals("All Teams")){
            setValuesForAllTimeLeaders();
            return;
        }
        
        setValuesForAllTimeTeamLeaders(selectedItem);
    }//GEN-LAST:event_allTimeTeamsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField allTimeAPG;
    private javax.swing.JTextField allTimeAPGName;
    private javax.swing.JTextField allTimeAssists;
    private javax.swing.JTextField allTimeAssistsName;
    private javax.swing.JTextField allTimeBPG;
    private javax.swing.JTextField allTimeBPGName;
    private javax.swing.JTextField allTimeBlocks;
    private javax.swing.JTextField allTimeBlocksName;
    private javax.swing.JTextField allTimePPG;
    private javax.swing.JTextField allTimePPGName;
    private javax.swing.JTextField allTimePoints;
    private javax.swing.JTextField allTimePointsName;
    private javax.swing.JTextField allTimeRPG;
    private javax.swing.JTextField allTimeRPGName;
    private javax.swing.JTextField allTimeRebounds;
    private javax.swing.JTextField allTimeReboundsName;
    private javax.swing.JTextField allTimeSPG;
    private javax.swing.JTextField allTimeSPGName;
    private javax.swing.JTextField allTimeSteals;
    private javax.swing.JTextField allTimeStealsName;
    private javax.swing.JComboBox<String> allTimeTeams;
    private javax.swing.JTextField apg;
    private javax.swing.JTextField apgName;
    private javax.swing.JTextField bpg;
    private javax.swing.JTextField bpgName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField ppg;
    private javax.swing.JTextField ppgName;
    private javax.swing.JTable predictionTable;
    private javax.swing.JTextField rpg;
    private javax.swing.JTextField rpgName;
    private javax.swing.JComboBox<String> seasonYears;
    private javax.swing.JTextField spg;
    private javax.swing.JTextField spgName;
    private javax.swing.JComboBox<String> teamNames;
    private javax.swing.JTextField totalAssist;
    private javax.swing.JTextField totalAssistName;
    private javax.swing.JTextField totalBlock;
    private javax.swing.JTextField totalBlockName;
    private javax.swing.JTextField totalPoint;
    private javax.swing.JTextField totalPointName;
    private javax.swing.JTextField totalRebound;
    private javax.swing.JTextField totalReboundName;
    private javax.swing.JTextField totalSteal;
    private javax.swing.JTextField totalStealName;
    // End of variables declaration//GEN-END:variables

    private void loadSeasonYears() {
        seasonYears.removeAllItems();
        for(int i = 1980; i <= 2021; i++){
            seasonYears.addItem(Integer.toString(i) + "-" + Integer.toString(i+1));
        }
    }
    private void loadTeamNames(int selectedYear) {
        teamNames.removeAllItems();
        teamNames.addItem("All Teams");
        String selectedItem = (String) seasonYears.getSelectedItem();
        if (selectedItem == null) {
            return;
        }
        
        ArrayList<String> tempTeamNames = new ArrayList<>();
      //  int selectedYear = Integer.parseInt(seasonYears.getItemAt(seasonYears.getSelectedIndex()).substring(0,4));
        for (TeamInfo x: playerData.allTeamsInfo){
            if (x.yearsPlayed.contains(selectedYear)){
                //teamNames.addItem(x.getTeamName());
                tempTeamNames.add(x.getTeamName());
                
            }
        }
        Collections.sort(tempTeamNames);
        for (String z : tempTeamNames){
            teamNames.addItem(z);
        }
        
    }
    
    private void loadAllTimeTeams(){
        allTimeTeams.removeAllItems();
        allTimeTeams.addItem("All Teams");
        ArrayList<String> tempTeamNames = new ArrayList<>();
        for(Map.Entry<String, String> entry : playerData.allTeamsMap.entrySet()){
            tempTeamNames.add(entry.getValue());
        }
        Collections.sort(tempTeamNames);
        for(String x : tempTeamNames){
            allTimeTeams.addItem(x);
        }
    }
    
    private void printTeamNames() {
        for(TeamInfo x : playerData.allTeamsInfo){
            System.out.println(x.getTeamAcronym() + " " + x.getTeamName() + " " + x.getYearsPlayed());
        }
        System.out.println("Total Teams " + playerData.teamSet.size());
    }
    
    private void setValuesForSeasonLeaders(int selectedYear){
        for(YearlyStats x: playerData.allYearlyStats){
            if(x.getYearPlayed() == selectedYear){
                totalPoint.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPointsScored()));
                totalPointName.setText(x.getHighestPointsPlayer().getPlayerName());
                totalRebound.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalReboundsMade()));
                totalReboundName.setText(x.getHighestReboundsPlayer().getPlayerName());
                totalAssist.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssistsMade()));
                totalAssistName.setText(x.getHighestAssistsPlayer().getPlayerName());
                totalBlock.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocksMade()));
                totalBlockName.setText(x.getHighestBlocksPlayer().getPlayerName());
                totalSteal.setText(Integer.toString(x.getHighestStealsPlayer().getTotalStealsMade()));
                totalStealName.setText(x.getHighestStealsPlayer().getPlayerName());
                ppg.setText(Double.toString(x.getHighestPPGPlayer().getPoints()));
                ppgName.setText(x.getHighestPPGPlayer().getPlayerName());
                rpg.setText(Double.toString(x.getHighestRPGPlayer().getTotalRebounds()));
                rpgName.setText(x.getHighestRPGPlayer().getPlayerName());
                apg.setText(Double.toString(x.getHighestAPGPlayer().getAssists()));
                apgName.setText(x.getHighestAPGPlayer().getPlayerName());
                bpg.setText(Double.toString(x.getHighestBPGPlayer().getBlocks()));
                bpgName.setText(x.getHighestBPGPlayer().getPlayerName());
                spg.setText(Double.toString(x.getHighestSPGPlayer().getSteals()));
                spgName.setText(x.getHighestSPGPlayer().getPlayerName());

            }
        }
    }
    
    private void setValuesForSeasonLeadersByTeamAndYear(int selectedYear, String teamName){
        for(TeamByYear x: playerData.allTeamsByYear){
            if (x.teamName.equals(teamName) && x.getTeamYear() == selectedYear){
                totalPoint.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPointsScored()));
                totalPointName.setText(x.getHighestPointsPlayer().getPlayerName());
                totalRebound.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalReboundsMade()));
                totalReboundName.setText(x.getHighestReboundsPlayer().getPlayerName());
                totalAssist.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssistsMade()));
                totalAssistName.setText(x.getHighestAssistsPlayer().getPlayerName());
                totalBlock.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocksMade()));
                totalBlockName.setText(x.getHighestBlocksPlayer().getPlayerName());
                totalSteal.setText(Integer.toString(x.getHighestStealsPlayer().getTotalStealsMade()));
                totalStealName.setText(x.getHighestStealsPlayer().getPlayerName());
                ppg.setText(Double.toString(x.getHighestPPGPlayer().getPoints()));
                ppgName.setText(x.getHighestPPGPlayer().getPlayerName());
                rpg.setText(Double.toString(x.getHighestRPGPlayer().getTotalRebounds()));
                rpgName.setText(x.getHighestRPGPlayer().getPlayerName());
                apg.setText(Double.toString(x.getHighestAPGPlayer().getAssists()));
                apgName.setText(x.getHighestAPGPlayer().getPlayerName());
                bpg.setText(Double.toString(x.getHighestBPGPlayer().getBlocks()));
                bpgName.setText(x.getHighestBPGPlayer().getPlayerName());
                spg.setText(Double.toString(x.getHighestSPGPlayer().getSteals()));
                spgName.setText(x.getHighestSPGPlayer().getPlayerName());
            }
        }
    }
    
    private void setValuesForAllTimeLeaders(){
        allTimePointsName.setText(playerData.allTimeLeaders.getHighestPointsPlayer().getPlayerName());
        allTimePoints.setText(Integer.toString(playerData.allTimeLeaders.getHighestPointsPlayer().getTotalPoints()));
        allTimeAssistsName.setText(playerData.allTimeLeaders.getHighestAssistsPlayer().getPlayerName());
        allTimeAssists.setText(Integer.toString(playerData.allTimeLeaders.getHighestAssistsPlayer().getTotalAssists()));
        allTimeReboundsName.setText(playerData.allTimeLeaders.getHighestReboundsPlayer().getPlayerName());
        allTimeRebounds.setText(Integer.toString(playerData.allTimeLeaders.getHighestReboundsPlayer().getTotalRebounds()));
        allTimeBlocksName.setText(playerData.allTimeLeaders.getHighestBlocksPlayer().getPlayerName());
        allTimeBlocks.setText(Integer.toString(playerData.allTimeLeaders.getHighestBlocksPlayer().getTotalBlocks()));
        allTimeStealsName.setText(playerData.allTimeLeaders.getHighestStealsPlayer().getPlayerName());
        allTimeSteals.setText(Integer.toString(playerData.allTimeLeaders.getHighestStealsPlayer().getTotalSteals()));
        
        allTimePPGName.setText(playerData.allTimeLeaders.getHighestPPGPlayer().getPlayerName());
        allTimePPG.setText(Double.toString(playerData.allTimeLeaders.getHighestPPGPlayer().getPpg()));
        allTimeAPGName.setText(playerData.allTimeLeaders.getHighestAPGPlayer().getPlayerName());
        allTimeRPG.setText(Double.toString(playerData.allTimeLeaders.getHighestAPGPlayer().getApg()));
        allTimeRPGName.setText(playerData.allTimeLeaders.getHighestRPGPlayer().getPlayerName());
        allTimeAPG.setText(Double.toString(playerData.allTimeLeaders.getHighestRPGPlayer().getRpg()));
        allTimeBPGName.setText(playerData.allTimeLeaders.getHighestBPGPlayer().getPlayerName());
        allTimeBPG.setText(Double.toString(playerData.allTimeLeaders.getHighestBPGPlayer().getBpg()));
        allTimeSPGName.setText(playerData.allTimeLeaders.getHighestSPGPlayer().getPlayerName());
        allTimeSPG.setText(Double.toString(playerData.allTimeLeaders.getHighestSPGPlayer().getSpg()));
    }
    
    private void setValuesForAllTimeTeamLeaders(String selectedTeam){
        for(TeamInfo x : playerData.allTeamsInfo){
            if(x.getTeamName().equals(selectedTeam)){
                allTimePointsName.setText(x.getHighestPointsPlayer().getPlayerName());
                allTimePoints.setText(Integer.toString(x.getHighestPointsPlayer().getTotalPoints()));
                allTimeAssistsName.setText(x.getHighestAssistsPlayer().getPlayerName());
                allTimeAssists.setText(Integer.toString(x.getHighestAssistsPlayer().getTotalAssists()));
                allTimeReboundsName.setText(x.getHighestReboundsPlayer().getPlayerName());
                allTimeRebounds.setText(Integer.toString(x.getHighestReboundsPlayer().getTotalRebounds()));
                allTimeBlocksName.setText(x.getHighestBlocksPlayer().getPlayerName());
                allTimeBlocks.setText(Integer.toString(x.getHighestBlocksPlayer().getTotalBlocks()));
                allTimeStealsName.setText(x.getHighestStealsPlayer().getPlayerName());
                allTimeSteals.setText(Integer.toString(x.getHighestStealsPlayer().getTotalSteals()));
                
                allTimePPGName.setText(x.getHighestPPGPlayer().getPlayerName());
                allTimePPG.setText(Double.toString(x.getHighestPPGPlayer().getPpg()));
                allTimeAPGName.setText(x.getHighestAPGPlayer().getPlayerName());
                allTimeAPG.setText(Double.toString(x.getHighestAPGPlayer().getApg()));
                allTimeRPGName.setText(x.getHighestRPGPlayer().getPlayerName());
                allTimeRPG.setText(Double.toString(x.getHighestRPGPlayer().getRpg()));
                allTimeBPGName.setText(x.getHighestBPGPlayer().getPlayerName());
                allTimeBPG.setText(Double.toString(x.getHighestBPGPlayer().getBpg()));
                allTimeSPGName.setText(x.getHighestSPGPlayer().getPlayerName());
                allTimeSPG.setText(Double.toString(x.getHighestSPGPlayer().getSpg()));
            }
            
        }
//        allTimePointsName.setText(playerData.allTimeLeaders.getHighestPointsPlayer().getPlayerName());
//        allTimePoints.setText(Integer.toString(playerData.allTimeLeaders.getHighestPointsPlayer().getTotalPoints()));
//        allTimeAssistsName.setText(playerData.allTimeLeaders.getHighestAssistsPlayer().getPlayerName());
//        allTimeAssists.setText(Integer.toString(playerData.allTimeLeaders.getHighestAssistsPlayer().getTotalAssists()));
//        allTimeReboundsName.setText(playerData.allTimeLeaders.getHighestReboundsPlayer().getPlayerName());
//        allTimeRebounds.setText(Integer.toString(playerData.allTimeLeaders.getHighestReboundsPlayer().getTotalRebounds()));
//        allTimeBlocksName.setText(playerData.allTimeLeaders.getHighestBlocksPlayer().getPlayerName());
//        allTimeBlocks.setText(Integer.toString(playerData.allTimeLeaders.getHighestBlocksPlayer().getTotalBlocks()));
//        allTimeStealsName.setText(playerData.allTimeLeaders.getHighestStealsPlayer().getPlayerName());
//        allTimeSteals.setText(Integer.toString(playerData.allTimeLeaders.getHighestStealsPlayer().getTotalSteals()));
//        
//        allTimePPGName.setText(playerData.allTimeLeaders.getHighestPPGPlayer().getPlayerName());
//        allTimePPG.setText(Double.toString(playerData.allTimeLeaders.getHighestPPGPlayer().getPpg()));
//        allTimeAPGName.setText(playerData.allTimeLeaders.getHighestAPGPlayer().getPlayerName());
//        allTimeAPG.setText(Double.toString(playerData.allTimeLeaders.getHighestAPGPlayer().getApg()));
//        allTimeRPGName.setText(playerData.allTimeLeaders.getHighestRPGPlayer().getPlayerName());
//        allTimeRPG.setText(Double.toString(playerData.allTimeLeaders.getHighestRPGPlayer().getRpg()));
//        allTimeBPGName.setText(playerData.allTimeLeaders.getHighestBPGPlayer().getPlayerName());
//        allTimeBPG.setText(Double.toString(playerData.allTimeLeaders.getHighestBPGPlayer().getBpg()));
//        allTimeSPGName.setText(playerData.allTimeLeaders.getHighestSPGPlayer().getPlayerName());
//        allTimeSPG.setText(Double.toString(playerData.allTimeLeaders.getHighestSPGPlayer().getSpg()));
    }

    public void loadPredictionTable(){
        DefaultTableModel tableModel = (DefaultTableModel) predictionTable.getModel();
        tableModel.setRowCount(0);
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        tableModel.insertRow(0, new Object[] {"1980", "Test", "Test", "Test"});
        
    }
}
